#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Range
from ar_track_alvar_msgs.msg import AlvarMarkers
from tf import transformations
import math

def ar_pose_callback(ar_msg):

    if len(ar_msg.markers) > 0:
        # position of the AR tag
        x = ar_msg.markers[0].pose.pose.position.x
        y = ar_msg.markers[0].pose.pose.position.y
        z = ar_msg.markers[0].pose.pose.position.z
        print("[ROS INFO] x:{:.2f}, y:{:.2f}, z:{:.2f}".format(x, y, z))
        
        
        print("Distance:", z)
        
        # orientation of the AR tag
        roll,pitch,yaw = transformations.euler_from_quaternion([ar_msg.markers[0].pose.pose.orientation.x, ar_msg.markers[0].pose.pose.orientation.y, ar_msg.markers[0].pose.pose.orientation.z, ar_msg.markers[0].pose.pose.orientation.w])
        print("[ROS INFO] roll:{:.2f}, pitch:{:.2f}, yaw:{:.2f}".format(roll, pitch, yaw))
    else:
        print("No AR tag detected")


rospy.init_node("ar_pose_printer_node", anonymous=True)
pose_sub = rospy.Subscriber("/ar_pose_marker", AlvarMarkers, callback=ar_pose_callback)
r = rospy.Rate(10)  # 10hz, every 0.1 seconds

while not rospy.is_shutdown():
    r.sleep()
